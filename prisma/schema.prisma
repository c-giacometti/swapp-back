generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  username String @unique
  email String @unique
  password String
  Product Product[]
  Likes Likes[]
  IsLiked IsLiked[]

  @@map("users")
}

model Product {
  id Int @id @default(autoincrement())
  productName String @db.VarChar(50)
  description String @db.VarChar(300)
  minPrice Float
  maxPrice Float
  imgUrl String
  createdAt DateTime @default(now())
  userId Int
  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
  Like Likes[]
  IsLiked IsLiked[]

  @@map("products")
}

model Likes {
  id Int @id @default(autoincrement())
  likingUserId Int
  likingProductId Int
  createdAt DateTime @default(now())
  LikingUserId User @relation(fields: [likingUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  LikingProductId Product @relation(fields: [likingProductId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  LikesIsLiked LikesIsLiked[]

  @@map("likes")
}

model IsLiked {
  id Int @id @default(autoincrement())
  likedProductId Int
  likedUserId Int
  createdAt DateTime @default(now())
  LikedUserId User @relation(fields: [likedUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  LikedProductId Product @relation(fields: [likedProductId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  LikesIsLiked LikesIsLiked[]
  
  @@map("isLiked")
}

model LikesIsLiked {
  id Int @id @default(autoincrement())
  likesId Int
  isLikedId Int
  isMatch Boolean @default(false)
  LikesId Likes @relation(fields: [likesId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  IsLikedId IsLiked @relation(fields: [isLikedId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("likesIsLiked")
}